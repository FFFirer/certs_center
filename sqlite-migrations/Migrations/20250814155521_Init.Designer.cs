// <auto-generated />
using System;
using CertsServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CertsServer.Migrations
{
    [DbContext(typeof(CertsServerDbContext))]
    [Migration("20250814155521_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "10.0.0-preview.5.25277.114");

            modelBuilder.Entity("CertsServer.Data.TicketEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DomainNames")
                        .HasColumnType("TEXT");

                    b.Property<string>("PfxPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("CertsServer.Data.TicketOrderEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LastUpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrderUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ticket_orders", (string)null);
                });

            modelBuilder.Entity("CertsServer.Data.TicketOrderEntity", b =>
                {
                    b.OwnsOne("CertsServer.Data.TicketCertificateEntity", "Certificate", b1 =>
                        {
                            b1.Property<long>("TicketOrderEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("AcmeOrderUrl")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("CreatedTime")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime?>("NotAfter")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime?>("NotBefore")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("Status")
                                .HasColumnType("INTEGER");

                            b1.Property<Guid?>("TicketId")
                                .HasColumnType("TEXT");

                            b1.Property<long>("TicketOrderId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("TicketOrderEntityId");

                            b1.ToTable("ticket_orders");

                            b1.ToJson("Certificate");

                            b1.WithOwner()
                                .HasForeignKey("TicketOrderEntityId");
                        });

                    b.Navigation("Certificate");
                });
#pragma warning restore 612, 618
        }
    }
}
